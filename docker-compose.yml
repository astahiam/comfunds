version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: comfunds_postgres
    environment:
      POSTGRES_DB: comfunds
      POSTGRES_USER: comfunds_user
      POSTGRES_PASSWORD: comfunds_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U comfunds_user -d comfunds"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - comfunds_network

  # Go API Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: comfunds_backend
    environment:
      DATABASE_URL: postgres://comfunds_user:comfunds_password@postgres:5432/comfunds?sslmode=disable
      PORT: 8080
      ENVIRONMENT: production
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/app/migrations
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - comfunds_network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: comfunds_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - comfunds_network
    restart: unless-stopped

  # Nginx Reverse Proxy (optional - for production)
  nginx:
    image: nginx:alpine
    container_name: comfunds_nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - comfunds_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  comfunds_network:
    driver: bridge
